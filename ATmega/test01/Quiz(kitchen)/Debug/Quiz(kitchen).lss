
Quiz(kitchen).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000003e2  00000476  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800116  00800116  0000048c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000004f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cbe  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a38  00000000  00000000  00001236  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005cf  00000000  00000000  00001c6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000154  00000000  00000000  00002240  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000488  00000000  00000000  00002394  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000045b  00000000  00000000  0000281c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002c77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	8b c0       	rjmp	.+278    	; 0x12c <__vector_5>
  16:	00 00       	nop
  18:	aa c0       	rjmp	.+340    	; 0x16e <__vector_6>
  1a:	00 00       	nop
  1c:	cf c0       	rjmp	.+414    	; 0x1bc <__vector_7>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	cb c0       	rjmp	.+406    	; 0x1d8 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ee       	ldi	r30, 0xE2	; 226
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 31       	cpi	r26, 0x16	; 22
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e1       	ldi	r26, 0x16	; 22
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 32       	cpi	r26, 0x25	; 37
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	8c c1       	rjmp	.+792    	; 0x3de <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:
	}
}
int main(void)
{
	long t = 0;
	SegPort(&PORTD, &PORTC);
  c8:	65 e3       	ldi	r22, 0x35	; 53
  ca:	70 e0       	ldi	r23, 0x00	; 0
  cc:	82 e3       	ldi	r24, 0x32	; 50
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	ca d0       	rcall	.+404    	; 0x266 <SegPort>
	DDRD = 0xFF; // Segment 제어를 위한 포트레지스터, 세그먼트 제어 핀 8개를 출력으로 설정
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	81 bb       	out	0x11, r24	; 17
	DDRC = 0x0F; // Segment 제어를 위한 포트레지스터, 자릿수 선택 핀 4개를 출력으로 설정
  d6:	8f e0       	ldi	r24, 0x0F	; 15
  d8:	84 bb       	out	0x14, r24	; 20
	//DDRB |= (1 << PB0); // LED를 출력
	DDRE = 0x8F; // PE 4,5,6 입력으로 설정
  da:	8f e8       	ldi	r24, 0x8F	; 143
  dc:	82 b9       	out	0x02, r24	; 2
	//EIMSK = 0x70; // PE4,5,6 설정을 위해 0111 0000 설정 됨.
	//EICRB = 0x2a; // PE4,5,6 하강에지시 동작을 시키기 위해 0010 1010 이 됨
	TIMSK |= 0x01; // 2진수 0000 0001 - Timer 0 TCNT Overflow interrupt, page 297 (8bit)
  de:	87 b7       	in	r24, 0x37	; 55
  e0:	81 60       	ori	r24, 0x01	; 1
  e2:	87 bf       	out	0x37, r24	; 55
	TCCR0 = 0x04;  // 분주비(Pre-Scaler) 64, page 296, |= 해줘도 됨. 주기를 결정하기 위해 사용. Timer 0
  e4:	84 e0       	ldi	r24, 0x04	; 4
  e6:	83 bf       	out	0x33, r24	; 51
	SREG |= 0x80;
  e8:	8f b7       	in	r24, 0x3f	; 63
  ea:	80 68       	ori	r24, 0x80	; 128
  ec:	8f bf       	out	0x3f, r24	; 63
	sei();
  ee:	78 94       	sei
	while (1)
	    {
		    if(cnt >= 0x10000) cnt = 0;
  f0:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <cnt>
  f4:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <cnt+0x1>
  f8:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <cnt+0x2>
  fc:	b0 91 1d 01 	lds	r27, 0x011D	; 0x80011d <cnt+0x3>
 100:	00 97       	sbiw	r24, 0x00	; 0
 102:	a1 40       	sbci	r26, 0x01	; 1
 104:	b1 05       	cpc	r27, r1
 106:	40 f0       	brcs	.+16     	; 0x118 <main+0x50>
 108:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <cnt>
 10c:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <cnt+0x1>
 110:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <cnt+0x2>
 114:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <cnt+0x3>
		    SegDisp(cnt);
 118:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <cnt>
 11c:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <cnt+0x1>
 120:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <cnt+0x2>
 124:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <cnt+0x3>
 128:	ea d0       	rcall	.+468    	; 0x2fe <SegDisp>
	    }
 12a:	e2 cf       	rjmp	.-60     	; 0xf0 <main+0x28>

0000012c <__vector_5>:
		_delay_ms(13);
	}*/

}
ISR(INT4_vect) // INT4 4번 인터럽트 처리 루틴 : sw1
{
 12c:	1f 92       	push	r1
 12e:	0f 92       	push	r0
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	0f 92       	push	r0
 134:	11 24       	eor	r1, r1
 136:	8f 93       	push	r24
 138:	9f 93       	push	r25
	opmode++;
 13a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <opmode>
 13e:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <opmode+0x1>
 142:	01 96       	adiw	r24, 0x01	; 1
 144:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <opmode+0x1>
 148:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <opmode>
	if(opmode >= OPMODEMAX) opmode = 0; // 직접 들어간거는 상수 처리 모드가 증가 하면 증가 해야 됨. opmode >= 3과 같이 직접 넣지 않도록 하는게 좋음.
 14c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <opmode>
 150:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <opmode+0x1>
 154:	03 97       	sbiw	r24, 0x03	; 3
 156:	24 f0       	brlt	.+8      	; 0x160 <__vector_5+0x34>
 158:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <opmode+0x1>
 15c:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <opmode>
}
 160:	9f 91       	pop	r25
 162:	8f 91       	pop	r24
 164:	0f 90       	pop	r0
 166:	0f be       	out	0x3f, r0	; 63
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti

0000016e <__vector_6>:
ISR(INT5_vect) // INT5 5번 인터럽트 처리 루틴 : 버튼 2
{
 16e:	1f 92       	push	r1
 170:	0f 92       	push	r0
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	0f 92       	push	r0
 176:	11 24       	eor	r1, r1
 178:	8f 93       	push	r24
 17a:	9f 93       	push	r25
	if (opmode == 0) // 설정 상태에서만 타이머 설정 가능
 17c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <opmode>
 180:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <opmode+0x1>
 184:	89 2b       	or	r24, r25
 186:	39 f4       	brne	.+14     	; 0x196 <__vector_6+0x28>
	{
		opmode = 1; // 카운터 시작
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <opmode+0x1>
 190:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <opmode>
 194:	0c c0       	rjmp	.+24     	; 0x1ae <__vector_6+0x40>
	}
	else if (opmode == 1) // 카운터 진행 중이면 카운터를 멈춤
 196:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <opmode>
 19a:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <opmode+0x1>
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	31 f4       	brne	.+12     	; 0x1ae <__vector_6+0x40>
	{
		opmode = 2; // 카운터 종료
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <opmode+0x1>
 1aa:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <opmode>
	}
}
 1ae:	9f 91       	pop	r25
 1b0:	8f 91       	pop	r24
 1b2:	0f 90       	pop	r0
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	0f 90       	pop	r0
 1b8:	1f 90       	pop	r1
 1ba:	18 95       	reti

000001bc <__vector_7>:
ISR(INT6_vect) // INT6 6번 인터럽트 처리 루틴 : 버튼 3
{
 1bc:	1f 92       	push	r1
 1be:	0f 92       	push	r0
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	0f 92       	push	r0
 1c4:	11 24       	eor	r1, r1
	opmode = 0; // 설정 초기화
 1c6:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <opmode+0x1>
 1ca:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <opmode>
}
 1ce:	0f 90       	pop	r0
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	0f 90       	pop	r0
 1d4:	1f 90       	pop	r1
 1d6:	18 95       	reti

000001d8 <__vector_16>:
ISR(TIMER0_OVF_vect)
{
 1d8:	1f 92       	push	r1
 1da:	0f 92       	push	r0
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	0f 92       	push	r0
 1e0:	11 24       	eor	r1, r1
 1e2:	2f 93       	push	r18
 1e4:	8f 93       	push	r24
 1e6:	9f 93       	push	r25
 1e8:	af 93       	push	r26
 1ea:	bf 93       	push	r27
	tcnt++;
 1ec:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 1f0:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
 1f4:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <__data_end+0x2>
 1f8:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <__data_end+0x3>
 1fc:	01 96       	adiw	r24, 0x01	; 1
 1fe:	a1 1d       	adc	r26, r1
 200:	b1 1d       	adc	r27, r1
 202:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 206:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_end+0x1>
 20a:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <__data_end+0x2>
 20e:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <__data_end+0x3>
	if(tcnt >= 1000)
 212:	88 3e       	cpi	r24, 0xE8	; 232
 214:	93 40       	sbci	r25, 0x03	; 3
 216:	a1 05       	cpc	r26, r1
 218:	b1 05       	cpc	r27, r1
 21a:	d8 f0       	brcs	.+54     	; 0x252 <__vector_16+0x7a>
	{
		cnt++; tcnt = 0;
 21c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <cnt>
 220:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <cnt+0x1>
 224:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <cnt+0x2>
 228:	b0 91 1d 01 	lds	r27, 0x011D	; 0x80011d <cnt+0x3>
 22c:	01 96       	adiw	r24, 0x01	; 1
 22e:	a1 1d       	adc	r26, r1
 230:	b1 1d       	adc	r27, r1
 232:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <cnt>
 236:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <cnt+0x1>
 23a:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <cnt+0x2>
 23e:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <cnt+0x3>
 242:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>
 246:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <__data_end+0x1>
 24a:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end+0x2>
 24e:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <__data_end+0x3>
	}
}
 252:	bf 91       	pop	r27
 254:	af 91       	pop	r26
 256:	9f 91       	pop	r25
 258:	8f 91       	pop	r24
 25a:	2f 91       	pop	r18
 25c:	0f 90       	pop	r0
 25e:	0f be       	out	0x3f, r0	; 63
 260:	0f 90       	pop	r0
 262:	1f 90       	pop	r1
 264:	18 95       	reti

00000266 <SegPort>:
char arr[5];
char* *PD = &PORTD, *PC = &PORTC; // void seg(int sel, uint8_t c)의 Port 정보를 포인터 배열로 바꾼것.

void SegPort(char *p1, char *p2)
{
	PD = p1, PC = p2; // *PD, *PC를 하면 출력 작업
 266:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <PD+0x1>
 26a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <PD>
 26e:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <PC+0x1>
 272:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <PC>
 276:	08 95       	ret

00000278 <seg>:
}
void seg(int sel, uint8_t c) // c : segment image, sel : chip select
{
	*PC |= 0x0F;
 278:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <PC>
 27c:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <PC+0x1>
 280:	20 81       	ld	r18, Z
 282:	2f 60       	ori	r18, 0x0F	; 15
 284:	20 83       	st	Z, r18
	*PC &= ~(1 << (3-sel));
 286:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <PC>
 28a:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <PC+0x1>
 28e:	23 e0       	ldi	r18, 0x03	; 3
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	28 1b       	sub	r18, r24
 294:	39 0b       	sbc	r19, r25
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <seg+0x28>
 29c:	88 0f       	add	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	2a 95       	dec	r18
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <seg+0x24>
 2a4:	80 95       	com	r24
 2a6:	90 81       	ld	r25, Z
 2a8:	89 23       	and	r24, r25
 2aa:	80 83       	st	Z, r24
	*PD = c;	
 2ac:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <PD>
 2b0:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <PD+0x1>
 2b4:	70 e0       	ldi	r23, 0x00	; 0
 2b6:	71 83       	std	Z+1, r23	; 0x01
 2b8:	60 83       	st	Z, r22
 2ba:	08 95       	ret

000002bc <FND_4>:
	PORTD = c; // 숫자 데이터 출력*/
	//_delay_us(11); // 0.01초 간격으로 전환
}
int sm = 4;
void FND_4(char *inf) // segment image 배열
{
 2bc:	0f 93       	push	r16
 2be:	1f 93       	push	r17
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	8c 01       	movw	r16, r24
	int i;
	for(i = 0; i < sm; i++) // Segment의 자릿수 증가를 표현함.
 2c6:	c0 e0       	ldi	r28, 0x00	; 0
 2c8:	d0 e0       	ldi	r29, 0x00	; 0
 2ca:	0d c0       	rjmp	.+26     	; 0x2e6 <FND_4+0x2a>
	{
		seg(i, *(inf+i));
 2cc:	f8 01       	movw	r30, r16
 2ce:	ec 0f       	add	r30, r28
 2d0:	fd 1f       	adc	r31, r29
 2d2:	60 81       	ld	r22, Z
 2d4:	ce 01       	movw	r24, r28
 2d6:	d0 df       	rcall	.-96     	; 0x278 <seg>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d8:	8f e1       	ldi	r24, 0x1F	; 31
 2da:	9e e4       	ldi	r25, 0x4E	; 78
 2dc:	01 97       	sbiw	r24, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <FND_4+0x20>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <FND_4+0x26>
 2e2:	00 00       	nop
}
int sm = 4;
void FND_4(char *inf) // segment image 배열
{
	int i;
	for(i = 0; i < sm; i++) // Segment의 자릿수 증가를 표현함.
 2e4:	21 96       	adiw	r28, 0x01	; 1
 2e6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2ea:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2ee:	c8 17       	cp	r28, r24
 2f0:	d9 07       	cpc	r29, r25
 2f2:	64 f3       	brlt	.-40     	; 0x2cc <FND_4+0x10>
	{
		seg(i, *(inf+i));
		_delay_ms(5); // 잔상효과를 얻기 위한 효율적인 지연시간 표현
	}
}
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	1f 91       	pop	r17
 2fa:	0f 91       	pop	r16
 2fc:	08 95       	ret

000002fe <SegDisp>:
char* SegDisp(unsigned long num) /* 10진 정수 ==> 16진수 문자열 : 56506 ==> 0xDCBA, 4 digit 16진수 segment 출력
 microchip studio는 integer가 2byte여서 unsigned long으로 써야 됨.*/
{
 2fe:	ef 92       	push	r14
 300:	ff 92       	push	r15
 302:	0f 93       	push	r16
 304:	1f 93       	push	r17
 306:	cf 93       	push	r28
 308:	df 93       	push	r29
	num %= 65536;
 30a:	8b 01       	movw	r16, r22
 30c:	9c 01       	movw	r18, r24
 30e:	22 27       	eor	r18, r18
 310:	33 27       	eor	r19, r19
	int n1 = num % 16;			// A : 문자가 아닌 숫자(10) // 10진수라면은 & 10으로 하면 됨
 312:	6f 70       	andi	r22, 0x0F	; 15
 314:	77 27       	eor	r23, r23
	int n2 = (num / 16) % 16;	// B : 문자가 아닌 숫자(11)
 316:	d9 01       	movw	r26, r18
 318:	c8 01       	movw	r24, r16
 31a:	68 94       	set
 31c:	13 f8       	bld	r1, 3
 31e:	b6 95       	lsr	r27
 320:	a7 95       	ror	r26
 322:	97 95       	ror	r25
 324:	87 95       	ror	r24
 326:	16 94       	lsr	r1
 328:	d1 f7       	brne	.-12     	; 0x31e <SegDisp+0x20>
 32a:	ec 01       	movw	r28, r24
 32c:	cf 70       	andi	r28, 0x0F	; 15
 32e:	dd 27       	eor	r29, r29
	int n3 = (num / 256) % 16;	// C : 문자가 아닌 숫자(12)
 330:	bb 27       	eor	r27, r27
 332:	a3 2f       	mov	r26, r19
 334:	92 2f       	mov	r25, r18
 336:	81 2f       	mov	r24, r17
 338:	7c 01       	movw	r14, r24
 33a:	4f e0       	ldi	r20, 0x0F	; 15
 33c:	e4 22       	and	r14, r20
 33e:	ff 24       	eor	r15, r15
	int n4 = (num / 4096);		// D : 문자가 아닌 숫자(13)
 340:	d9 01       	movw	r26, r18
 342:	c8 01       	movw	r24, r16
 344:	07 2e       	mov	r0, r23
 346:	7c e0       	ldi	r23, 0x0C	; 12
 348:	b6 95       	lsr	r27
 34a:	a7 95       	ror	r26
 34c:	97 95       	ror	r25
 34e:	87 95       	ror	r24
 350:	7a 95       	dec	r23
 352:	d1 f7       	brne	.-12     	; 0x348 <SegDisp+0x4a>
 354:	70 2d       	mov	r23, r0
	arr[0] = digit[n1];
 356:	6a 5f       	subi	r22, 0xFA	; 250
 358:	7e 4f       	sbci	r23, 0xFE	; 254
 35a:	fb 01       	movw	r30, r22
 35c:	60 81       	ld	r22, Z
 35e:	40 e2       	ldi	r20, 0x20	; 32
 360:	51 e0       	ldi	r21, 0x01	; 1
 362:	fa 01       	movw	r30, r20
 364:	60 83       	st	Z, r22
	arr[1] = digit[n2];
 366:	ca 5f       	subi	r28, 0xFA	; 250
 368:	de 4f       	sbci	r29, 0xFE	; 254
 36a:	68 81       	ld	r22, Y
 36c:	61 83       	std	Z+1, r22	; 0x01
	arr[2] = digit[n3];
 36e:	f7 01       	movw	r30, r14
 370:	ea 5f       	subi	r30, 0xFA	; 250
 372:	fe 4f       	sbci	r31, 0xFE	; 254
 374:	60 81       	ld	r22, Z
 376:	fa 01       	movw	r30, r20
 378:	62 83       	std	Z+2, r22	; 0x02
	arr[3] = digit[n4];
 37a:	fc 01       	movw	r30, r24
 37c:	ea 5f       	subi	r30, 0xFA	; 250
 37e:	fe 4f       	sbci	r31, 0xFE	; 254
 380:	80 81       	ld	r24, Z
 382:	fa 01       	movw	r30, r20
 384:	83 83       	std	Z+3, r24	; 0x03
	sm = (num > 4095) ? 4 : (num > 256) ? 3 : (num > 16) ? 2 : 1; // Segment가 4자리가 있을때 자릿수의 값보다 작으면 표시가 안되게 해주는 것
 386:	01 15       	cp	r16, r1
 388:	f0 e1       	ldi	r31, 0x10	; 16
 38a:	1f 07       	cpc	r17, r31
 38c:	21 05       	cpc	r18, r1
 38e:	31 05       	cpc	r19, r1
 390:	70 f4       	brcc	.+28     	; 0x3ae <SegDisp+0xb0>
 392:	01 30       	cpi	r16, 0x01	; 1
 394:	41 e0       	ldi	r20, 0x01	; 1
 396:	14 07       	cpc	r17, r20
 398:	21 05       	cpc	r18, r1
 39a:	31 05       	cpc	r19, r1
 39c:	58 f4       	brcc	.+22     	; 0x3b4 <SegDisp+0xb6>
 39e:	01 31       	cpi	r16, 0x11	; 17
 3a0:	11 05       	cpc	r17, r1
 3a2:	21 05       	cpc	r18, r1
 3a4:	31 05       	cpc	r19, r1
 3a6:	48 f0       	brcs	.+18     	; 0x3ba <SegDisp+0xbc>
 3a8:	82 e0       	ldi	r24, 0x02	; 2
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	08 c0       	rjmp	.+16     	; 0x3be <SegDisp+0xc0>
 3ae:	84 e0       	ldi	r24, 0x04	; 4
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	05 c0       	rjmp	.+10     	; 0x3be <SegDisp+0xc0>
 3b4:	83 e0       	ldi	r24, 0x03	; 3
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <SegDisp+0xc0>
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3c2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	FND_4(arr);
 3c6:	80 e2       	ldi	r24, 0x20	; 32
 3c8:	91 e0       	ldi	r25, 0x01	; 1
 3ca:	78 df       	rcall	.-272    	; 0x2bc <FND_4>
	return arr;
 3cc:	80 e2       	ldi	r24, 0x20	; 32
 3ce:	91 e0       	ldi	r25, 0x01	; 1
 3d0:	df 91       	pop	r29
 3d2:	cf 91       	pop	r28
 3d4:	1f 91       	pop	r17
 3d6:	0f 91       	pop	r16
 3d8:	ff 90       	pop	r15
 3da:	ef 90       	pop	r14
 3dc:	08 95       	ret

000003de <_exit>:
 3de:	f8 94       	cli

000003e0 <__stop_program>:
 3e0:	ff cf       	rjmp	.-2      	; 0x3e0 <__stop_program>
